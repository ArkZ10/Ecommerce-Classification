# -*- coding: utf-8 -*-
"""NLP(Text Classification).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fAJm4q6xV-p0T51ZywdladeCN7HltVBT
"""

! apt-get install git

!git clone https://github.com/ArkZ10/NLP-Dicoding.git

"""##ML PART"""

path = '/content/NLP-Dicoding/ecommerceDataset.csv'

import pandas as pd
column_names = ['category', 'text']
df = pd.read_csv(path, header=None, names=column_names)
df = df.dropna()
# df['category'] = df['category'].str.lower()
df.head()

df.isna().any()

df['category'].value_counts()

df = df.groupby('category', group_keys=False).apply(lambda x: x.sample(min(len(x), 600)))

df['category'].value_counts()

df['category'].unique()

df.dtypes

df.shape

import seaborn as sns
import matplotlib.pyplot as plt

df['category'] = df['category'].astype('category')

sns.countplot(data=df, x='category')
plt.xticks(rotation=45)
plt.show()

df['text_length'] = df['text'].str.len()
print(df['text_length'])

df.head()

df.info()

df['clean_text'] = df['text'].str.lower()
df['clean_text']

import nltk
nltk.download('stopwords')

from nltk.corpus import stopwords
stop = stopwords.words('english')
df['clean_text'] = df['clean_text'].apply(lambda x: " ".join([word for word in x.split() if word not in stop]))
df.head()

stop

df['Clean_text_length'] = df['clean_text'].str.len()
df.head()

"""##TRY 3"""

import numpy as np
import tensorflow as tf
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from keras.preprocessing.text import Tokenizer
from keras.preprocessing.sequence import pad_sequences
from keras.layers import Embedding, LSTM, Dense, Dropout, BatchNormalization, Conv1D, Bidirectional
from keras.models import Sequential
from keras.optimizers import Adam
from keras.utils import to_categorical
from keras.regularizers import l2

X = df['clean_text']
y = df['category']

label_encoder = LabelEncoder()
y_encoded = label_encoder.fit_transform(y)
num_classes = len(label_encoder.classes_)

X_train, X_val, y_train, y_val = train_test_split(X, y_encoded, test_size=0.2, random_state=42, stratify=y_encoded)

X_train.shape

X_val.shape

np.unique(y_train)

max_words = 1000
max_len = 900
tokenizer = Tokenizer(num_words=max_words)
tokenizer.fit_on_texts(X_train)
X_train_seq = tokenizer.texts_to_sequences(X_train)
X_val_seq = tokenizer.texts_to_sequences(X_val)

X_train_pad = pad_sequences(X_train_seq, maxlen=max_len)
X_val_pad = pad_sequences(X_val_seq, maxlen=max_len)

# y_train_one_hot = to_categorical(y_train, num_classes)
# y_val_one_hot = to_categorical(y_val, num_classes)

# model = Sequential()
# model.add(Embedding(input_dim=max_words, output_dim=50, input_length=max_len))
# model.add(LSTM(128))
# model.add(Dense(64, activation='relu'))
# model.add(Dropout(0.8))
# model.add(BatchNormalization())
# model.add(Conv1D(32,5,activation = 'relu'))
# model.add(Dense(32, activation='relu'))
# model.add(Dropout(0.8))
# model.add(Dense(16, activation='relu'))
# model.add(LSTM(32, kernel_regularizer=l2(0.01)))
# model.add(Dense(32, activation='relu'))
# model.add(Bidirectional(LSTM(32, kernel_regularizer=l2(0.001))))
# model.add(Bidirectional(LSTM(256, return_sequences=True)))
# model.add(Dropout(0.5))
# model.add(Dense(num_classes, activation='softmax'))


model = Sequential([
    Embedding(input_dim=max_words, output_dim=50, input_length=max_len),
    Dropout(0.5),
    # LSTM(64, return_sequences = True, kernel_regularizer=l2(0.001)),
    # Dropout(0.5),
    LSTM(32),
    Dense(num_classes, activation='softmax')
])



model.summary()

class myCallback(tf.keras.callbacks.Callback):
    def on_epoch_end(self, epoch, logs={}):
        if (logs.get('accuracy') > 0.9 and logs.get('val_accuracy') > 0.9):
            print("\nAccuracy is more than 91$, stopping...")
            self.model.stop_training = True

callbacks = myCallback()

model.compile(loss='sparse_categorical_crossentropy', optimizer=Adam(learning_rate=0.001), metrics=['accuracy'])
model.fit(X_train_pad, y_train, epochs=50, batch_size=128, validation_data=(X_val_pad, y_val), callbacks=callbacks)

# Text 1 = Household
# Text 2 = Books
# Text 3 = Clothing & Accessories
# Text 4 = Electronics

texts = [
    "Paper Plane Design Starry Night Vangoh Wall Art Canvas Painting. Large Size Rolled Canvas Art Print (36"" X 48"") We use only the most modern and efficient printing technology on our canvases, with only the best and original inks and precision Epson< Roland and HP printers. This innovative HD printing technique results in durable and spectacular looking prints of the highest quality that last a lifetime. We print solely with top-notch inks, to achieve brilliant and true colours. Due to their high level of UV Resistance, our Canvas prints retain their beautiful colours for many years. Our canvases contain high levels of white, to ensure that the colours of your original image are reproduced exactly, with brilliant tones. Add colour and style to your living space with this digitally printed canvas painting. Some gifts are for pleasure and some for eternal bliss.So bring home this elegant Canvas print that is lushed with Rich colors that makes it nothing but sheer elegance to be gifted to your friends and family.It would be treasured forever by whoever your lucky recipient is. Liven up your place with these intriguing paintings on canvas that are high definition hd graphic digital prints for home, office or any room. A perfect size of 36 inches x 48 inches suits every size of space and are a great match with every architectural setting. We prove raw canvas prints with special left extra margins for any type of framing required which you can get done as you please. Art comes in a safe delivery tube. prints are made using latest technology and original inks to get a perfect colour and long lasting design.",
    "The Satanic Bible Amazon.com Review One might expect The Satanic Bible at least to offer a few prancing demons or a virgin sacrifice, but if you hopped this train expecting a tour of the house of horrors, you're on the wrong ride. Far from a manual for conquering the realms of earth, air, fire, and water, The Satanic Bible is Anton LaVey's manifesto of a new religion separate from the ""traditional"" Judeo-Christian definitions of Satanism. While LaVey rails against the deceit of the Christian church and white magicians, he busily weaves his own deceptions. The Satanic Bible claims the heritage of a horde of evil deities--Bile', Dagon, Moloch, and Yao Tzin to name a few--but these ancient gods have no coherent connection between each other or to Satanism, except that all have been categorized by Christianity as ""evil."" Calling on these ancient names like a magician shouting, ""Abracadabra,"" LaVey attempts to shatter the classical depiction of Satanism as a cult of black mass and child sacrifice. As the smoke clears, he leads us through a surprisingly logical argument in favor of a life focused on self-indulgence. The Satanic Bible is less bible and more philosophy (with a few rituals thrown in to keep us entertained), but this philosophy is the backbone of a religion that, until LaVey entered the scene, was merely a myth of the Christian church. It took LaVey, and The Satanic Bible, to turn this myth into a legitimate public religion. --Brian Patterson  About the Author The author of the book, Anton LaVey or Howard Stanton Levey, was an American occultist and musician. Out of sheer frustration and disregard to the hypocrisy followed by the Christian churchmen and so called pious and religious people, he found the Church of Satan. He was also the founder of LaVeyan Satanism which is a system of understanding the philosophies and human nature based on materialism and individualism. The various books authored by LaVey include The Satanic Bible, The Satanic Rituals, The Satanic Witch, The Devilâ€™s Notebook, and Satan Speaks!",
    "Selfcare Women Boy Short Panty It's a Selfcare Combo Pack of High-Waist Super Control Tummy Tucker Panty to shed your extra kilos, very useful to reduce that bulge from your waist. Now In new Boy short style this panty is Comfortable, soft feel cotton fabric, Full-seam back panel gently lifts, firms up and promotes youthful sexy rounded feminine silhouette. Tummy control (Back to Normal) for the new mom",
    "Karbonn Titanium Wind W4 (White) Karbonn Titanium Wind W4 Efficient Performance A power packed Windows phone that is pocket friendly, it is the Karbonn Titanium Wind W4. With its 512 MB RAM, this phone works smoothly with its Window 8.1 operating system which is efficient and user friendly. It has a high speed 1.2 GHz Qaud Core processor for lag-free operations. It is equipped with 4 GB internal storage capacity which can be expanded up to 32 GB with an external SD card. With so much of advanced technology, this smartphone is quite within the reach of your budget.  Sleek Design and Stunning Camera The efficiency of this device is not restricted to its performance. The efficient design with its compact dimensions, 17 x 10.6 x 5.8 cm, and light weight, 122 g, makes it ergonomics and easy to hold avoiding accidental slips or drops. The white bezel is elegant and professional. The 4 inches LCD display has a resolution of 800 x 480 pixels for a colourful and clear picture quality. It has a pixel density of 233 ppi. It has a 5 MP rear camera with autofocus. It is accompanied with an LED flash for bright pictures even in low light conditions. It is loaded with a 0.3 MP front camera for selfies, video calling and more.  Battery Backup and Connectivity Powered by 1,950 mAh Lithium-ion battery, gives you a battery backup of up to 8 hours of talk time and 240 hours of standby time. It is Wi-Fi and Bluetooth enabled for high speed data connectivity and data transfer. It comes with USB cable, earphones, Battery, Charger, User manual and Warranty card. Grab the Karbonn Titanium Wind W4 to experience cost effective and superior performance."
    ]

texts_seq = tokenizer.texts_to_sequences(texts)
texts_pad = pad_sequences(texts_seq, maxlen=max_len)
predictions = model.predict(texts_pad)
predicted_categories = [label_encoder.classes_[np.argmax(pred)] for pred in predictions]

for i, predicted_category in enumerate(predicted_categories):
    print(f'The predicted category for Text {i + 1} is: {predicted_category}')

